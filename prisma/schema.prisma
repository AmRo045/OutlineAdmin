// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Server {
  id                       Int          @id @default(autoincrement())
  apiUrl                   String
  managementJson           String
  apiCertSha256            String
  apiId                    String
  name                     String
  version                  String
  hostnameOrIp             String
  hostnameForNewAccessKeys String
  portForNewAccessKeys     Int
  totalDataUsage           BigInt?
  isMetricsEnabled         Boolean
  isAvailable              Boolean      @default(true)
  apiCreatedAt             DateTime
  createdAt                DateTime     @default(now())
  updatedAt                DateTime?    @updatedAt
  accessKeys               AccessKey[]
  healthCheck              HealthCheck?
}

model AccessKey {
  id            Int       @id @default(autoincrement())
  serverId      Int
  apiId         String
  name          String
  prefix        String?
  password      String
  method        String
  accessUrl     String
  port          Int
  dataLimit     BigInt?
  dataLimitUnit String
  dataUsage     BigInt    @default(0)
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  server        Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)

  dynamicAccessKeys DynamicAccessKey[] @relation("AccessKeyDynamicAccessKeys")

  @@unique([serverId, apiId])
}

model DynamicAccessKey {
  id                    Int       @id @default(autoincrement())
  name                  String
  path                  String    @unique
  loadBalancerAlgorithm String
  prefix                String?
  expiresAt             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accessKeys AccessKey[] @relation("AccessKeyDynamicAccessKeys")
}

model NotificationChannel {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  config    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  healthChecks HealthCheck[]
}

model HealthCheck {
  id                    Int       @id @default(autoincrement())
  serverId              Int       @unique
  notificationChannelId Int?
  lastCheckedAt         DateTime?
  isAvailable           Boolean   @default(true)
  notification          String?
  notificationConfig    String?
  notificationSentAt    DateTime?
  notificationCooldown  Int       @default(5)
  interval              Int       @default(1)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  server              Server               @relation(fields: [serverId], references: [id], onDelete: Cascade)
  notificationChannel NotificationChannel? @relation(fields: [notificationChannelId], references: [id])
}
